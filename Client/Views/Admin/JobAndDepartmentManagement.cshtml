@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = "_UserLayout";
    ViewBag.Title = "Job And Department Management";
    ViewBag.Id = HttpContextAccessor.HttpContext.Session.GetInt32("ID");
}

@section navbar{
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="admin" asp-action="">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span>Dashboard</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="Account">
            <i class="fas fa-user-circle"></i>
            <span> Account </span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="AllocationsLeave">
            <i class="fas fa-user-clock"></i>
            <span> Allocations Leave</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="EmployeeManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Employee Management</span>
        </a>
    </li>

    <li class="nav-item active">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="JobAndDepartmentManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Department & Jobs Management</span>
        </a>
    </li>
}

<!-- CSS -->
<style>

    label {
        width: 300px;
        display: inline-block;
        margin-top: 20px;
    }

        label.error {
            color: red;
            font-size: 12px;
            display: block;
            margin-top: 5px;
        }

    /* input.error, textarea.error, select.form-control {
                                font-size: 12px;
                                border: 1px solid red;
                                color: red;
                                width: 100%;
                                box-sizing: border-box;
                            }*/

    h6 {
        margin-top: 8px;
        font-size: 15px;
    }

    .error {
        color: red;
        font-size: 20px;
        position: relative;
        line-height: 1;
        width: 100%;
    }
</style>

<!-- BODY -->
<div class="card shadow	mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary"> Job And Department Management </h6>
    </div>
    <div class="card-body">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home-tab-pane" role="tab" aria-controls="home" aria-selected="true">Departments</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile-tab-pane" role="tab" aria-controls="profile" aria-selected="false">Jobs</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact-tab-pane" role="tab" aria-controls="contact" aria-selected="false">Jobs Placements</a>
            </li>
        </ul>
        <div class="tab-content" id="myTabContent">

            <!-- DEPARTMENT -->
            <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
                <br />
                <a type="button" id="insert" value="insert" class="mb-3 btn btn-primary btn-sm btn-icon-split" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#dep" onclick="$('#formDepartment')[0].reset(); Add()">
                    <span class="icon text-white-50">
                        <i class="fas fa-plus"></i>
                    </span>
                    <span class="text">New Department</span>
                </a>
                <div class="table-responsive text-center">
                    <table id="department" class="table align-items-center" width="100%">
                        <thead class="table-light">
                            <tr class="text-dark;">
                                <th style="text-align: center;">ID</th>
                                <th style="text-align: center;">Name</th>
                                <th style="text-align: center;">Address</th>
                                <th style="text-align: center;">Action</th>
                            </tr>
                        </thead>
                        <tbody class="text-dark">
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- JOBS -->
            <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">
                <br />
                <a type="button" id="insert" value="insert" class="mb-3 btn btn-primary btn-sm btn-icon-split" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#job" onclick="$('#formJobs')[0].reset(); Add1()">
                    <span class="icon text-white-50">
                        <i class="fas fa-plus"></i>
                    </span>
                    <span class="text">New Jobs</span>
                </a>
                <div class="table-responsive text-center">
                    <table id="jobs" class="table align-items-center" width="100%">
                        <thead>
                            <tr>
                                <th style="text-align: center;">ID</th>
                                <th style="text-align: center;">Name</th>
                                <th style="text-align: center;">Min-Salary</th>
                                <th style="text-align: center;">Max-Salary</th>
                                <th style="text-align: center;">Action</th>
                            </tr>
                        </thead>
                        <tbody class="text-dark">
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- job placement-->
            <div class="tab-pane fade" id="contact-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
                <br />
                <a type="button" id="insert" value="insert" class="mb-3 btn btn-primary btn-sm btn-icon-split" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#jobdep" onclick="$('#formJobdep')[0].reset(); Add2()">
                    <span class="icon text-white-50">
                        <i class="fas fa-plus"></i>
                    </span>
                    <span class="text">New Jobs Placements</span>
                </a>
                <div class="table-responsive text-center">
                    <table id="Myjobplacement" class="table align-items-center" width="100%">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 5%;">No. </th>
                                <th style="text-align: center; width: 25%;">Employee</th>
                                <th style="text-align: center; width: 40%;">Department</th>
                                <th style="text-align: center; width: 25%;">Job</th>
                                <th style="text-align: center;">Action</th>
                            </tr>
                        </thead>
                        <tbody class="text-dark">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal MENU 1-->
<div class="modal fade" id="dep" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5" id="exampleModalLabel">Data Department</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formDepartment" name="form" autocomplete="off" class="needs-validation" novalidate>
                    @* <div class="form-group">
                    <label for="id">ID:</label>
                    <input type="number" class="form-control" placeholder="Masukkan ID" id="departmentId" name="departmentId">
                    </div>*@
                    <input type="hidden" id="departmentId" name="departmentId">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="departmentName" placeholder="Enter Department Name" name="departmentName" required>
                    </div>
                    <div class="form-group">
                        <label for="address">Address:</label>
                        <input type="text" class="form-control" id="address" placeholder="Enter Department Address" name="address" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- Modal MENU 2-->
<div class="modal fade" id="job" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5" id="exampleModalLabel">Data Jobs</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formJobs" name="form" autocomplete="off" class="needs-validation" novalidate>
                    @*<div class="form-group">
                    <label for="id">ID:</label>
                    <input type="number" class="form-control" placeholder="Masukkan ID" id="jobId" name="jobId">
                    </div>*@
                    <input type="hidden" id="jobsId" name="jobId">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="jobName" placeholder="Enter Job Name" name="jobName" required>
                    </div>
                    <div class="form-group">
                        <label for="address">Min Salary:</label>
                        <input type="text" class="form-control" id="minSalary" placeholder="Enter Min Salary" name="minSalary" required>
                    </div>
                    <div class="form-group">
                        <label for="address">Max Salary:</label>
                        <input type="text" class="form-control" id="maxSalary" placeholder="Enter Max Salary" name="maxSalary" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal MENU 3-->
<div class="modal fade" id="jobdep" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5" id="exampleModalLabel">Job Placement</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formJobdep" name="form" autocomplete="off" class="needs-validation" novalidate>
                    <input type="hidden" id="jpId" name="jpId">
                    <div class="form-group">
                        <label for="employee" class="form-label">Employee:</label>
                        <select class="form-control" id="employee" name="employee" style="width:100%" required>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="deps" class="form-label">Department:</label>
                        <select class="form-control" id="deps" name="deps" style="width:100%" required>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="jobb" class="form-label">Job:</label>
                        <select class="form-control" id="jobb" name="jobb" style="width:100%" required>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!-- END BODY -->
@section scripts{
    <script>
        //CRUD
        // DEPARTMENTS
        // GET DATA
        let departTable = $('#department').DataTable({
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'pageLength',
                    className: 'btn btn-sm text-light bg-info',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: [0, 1, 2]
                    },
                    titleAttr: 'Excel',
                    className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                    text: '<i class="fas fa-solid fa-file-excel"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'pdfHtml5',
                    customize: function (doc) {
                        doc.content[1].table.widths =
                            Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                    },
                    exportOptions: {
                        columns: [0, 1, 2]
                    },
                    titleAttr: 'Pdf',
                    className: 'btn btn-sm btn-danger',
                    text: '<i class="fa-regular fa-file-pdf"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                }
            ],
            initComplete: () => {
                $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                $('.buttons-pdf').removeClass('buttons-pdf');

            },
            ajax: {
                url: `https://localhost:7090/api/Departments`,
                dataType: "Json",
                dataSrc: ""
            },
            columns: [ //untuk nampilin nama kolom di datatable
                {
                    "render": (data, type, row, meta) => {
                        return meta.row + meta.settings._iDisplayStart + 1
                    }
                },
                {
                    "data": "name"
                },
                {
                    "data": "address"
                },
                {
                    "data": "id",
                    render: function (data, type, row) {
                        return `<div class="row"><div class="mx-auto"><a type="button" onclick="UpdateDepartment('${data}')" class="btn btn-sm text-light bg-success" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#dep" data-toggle="tooltip" data-placement="top" title="Edit"><i class="fa-regular fa-pen-to-square"></i></a> <a type="button" onclick="DeleteDepartment('${data}')" class="ml-2 btn btn-sm text-light bg-danger" style="box-shadow:3px 3px #000;" data-toggle="tooltip" data-placement="top" title="Delete"><i class="fa-solid fa-trash"></i></a></div></div>`;
                    }
                }
            ],
            dom: 'Bfrtip',
            buttons: [
                    {
                        extend: 'pageLength',
                        className: 'btn btn-sm text-light bg-info',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, 1, 2]
                        },
                        titleAttr: 'Excel',
                        className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                        text: '<i class="fas fa-solid fa-file-excel"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        exportOptions: {
                            columns: [0,1,2]
                        },
                        titleAttr: 'Pdf',
                        className: 'btn btn-sm btn-danger',
                        text: '<i class="fa-regular fa-file-pdf"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    }
                ],
                initComplete: () => {
                    $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                    $('.buttons-pdf').removeClass('buttons-pdf');

                },
        });
        //validate
        $(document).ready(function () {
            $('#formDepartment').validate({
                rules: {
                    departmentName: {
                        required: true,
                    },
                    address: {
                        required: true
                    },
                },
                messages: {
                    departmentName: "<h6>Enter Department Name</h6>",
                    address: "<h6>Enter Department Address</h6>",
                },
                submitHandler: () => {
                    if (!check) {
                        InsertDepartment()
                    } else {
                        prosesUpdateDepartment()
                    }
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    // Add the help-block class to the error element
                    error.addClass("help-block");
                    // Add has-feedback class to the parent div.form-group
                    // in order to add icons to inputs
                    element.parents(".col-sm-5").addClass("has-feedback");
                    if (element.prop("type") === "checkbox") {
                        error.insertAfter(element.parent("label"));
                    } else {
                        error.insertAfter(element);
                    }
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!element.next("span")[0]) {
                        $("<span class='glyphicon glyphicon-remove form-control-feedback'></span>").insertAfter(element);
                    }
                },
                success: function (label, element) {
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!$(element).next("span")[0]) {
                        $("<span class='glyphicon glyphicon-ok form-control-feedback'></span>").insertAfter($(element));
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-error").removeClass("has-success");
                    $(element).next("span").addClass("glyphicon-remove").removeClass("glyphicon-ok");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-success").removeClass("has-error");
                    $(element).next("span").addClass("glyphicon-ok").removeClass("glyphicon-remove");
                }
            })
        });
        //Untuk cek button apakah dia insert atau update
        let check
        const Add = () => {
            check = false
        }
        //insert
        function InsertDepartment() {
            let obj = {
                name: $("#departmentName").val(),
                address: $("#address").val(),
            };
            console.log(obj);
            $.ajax({
                url: `https://localhost:7090/api/Departments`,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(obj) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                $('#dep').modal('hide');
                Swal.fire(
                    'Insert!',
                    'Data Berhasil Disimpan.',
                    'success'
                )
                departTable.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                )
            }) //penutup ERROR
        } //penutup insert()
        //update
        function UpdateDepartment(id) {
            check = true //NILAI TRUE UNTUK UPDATE, YANG AKAN MASUK KE CHECK
            $.ajax({
                url: `https://localhost:7090/api/Departments/` + id,
                dataType: "Json",
                Type: "GET",
                dataSrc: ""
            }).done((result) => {
                $('#departmentId').val(result.id);
                $("#departmentName").val(result.name);
                $("#address").val(result.address);

                console.log(result.id);
            })
        }
        function prosesUpdateDepartment() {
            event.preventDefault(); //untuk memberhentikan proses/action sebelumnya
            let coba = {
                id: $("#departmentId").val(),
                name: $("#departmentName").val(),
                address: $("#address").val(),
            };
            console.log(coba);
            $.ajax({
                url: "https://localhost:7090/api/Departments",
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(coba) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                console.log("success");
                $('#dep').modal('hide');
                Swal.fire(
                    'Update!',
                    'Data Berhasil Disimpan.',
                    'success'
                );
                $('#department').modal('hide')
                departTable.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                );
            })
        }
        //delete
        function DeleteDepartment(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You wont able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'DELETE',
                        url: `https://localhost:7090/api/Departments/${id}`,
                        success: () => {
                            Swal.fire(
                                'Deleted!',
                                'Employee has been deleted.',
                                'success'
                            )
                            departTable.ajax.reload()
                        },
                        error: () => {
                            Swal.fire(
                                'Failed!',
                                'Error deleting employee.',
                                'error'
                            )
                        }
                    })
                }
            })
        }
        
        // JOBS
        // GET DATA
        let jobTables = $('#jobs').DataTable({
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'pageLength',
                    className: 'btn btn-sm text-light bg-info',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: [0, 1, 2, 3]
                    },
                    titleAttr: 'Excel',
                    className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                    text: '<i class="fas fa-solid fa-file-excel"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'pdfHtml5',
                    customize: function (doc) {
                        doc.content[1].table.widths =
                            Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                    },
                    exportOptions: {
                        columns: [0, 1, 2, 3]
                    },
                    titleAttr: 'Pdf',
                    className: 'btn btn-sm btn-danger',
                    text: '<i class="fa-regular fa-file-pdf"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                }
            ],
            initComplete: () => {
                $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                $('.buttons-pdf').removeClass('buttons-pdf');

            },
            ajax: {
                url: `https://localhost:7090/api/Jobs`,
                dataType: "Json",
                dataSrc: ""
            },
            columns: [ //untuk nampilin nama kolom di datatable
                {
                    "render": (data, type, row, meta) => {
                        return meta.row + meta.settings._iDisplayStart + 1
                    }
                },
                {
                    "data": "name"
                },
                {
                    "data": null,
                    render: function (data, type, row) {
                        return 'Rp. ' + row["minSalary"];
                    }
                },
                {
                    "data": null,
                    render: function (data, type, row) {
                        return 'Rp. ' + row["maxSalary"];
                    }
                },
                {
                    "data": "id",
                    render: function (data) {
                        return `<div class="row"><div class="mx-auto"><a type="button" onclick="UpdateJob('${data}')" class="btn btn-sm text-light bg-success" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#job" data-toggle="tooltip" data-placement="top" title="Edit"><i class="fa-regular fa-pen-to-square"></i></a> <a type="button" onclick="DeleteJob('${data}')" class="ml-2 btn btn-sm text-light bg-danger" style="box-shadow:3px 3px #000;" data-toggle="tooltip" data-placement="top" title="Delete"><i class="fa-solid fa-trash"></i></a></div></div>`;
                        
                    }
                }
            ],
            dom: 'Bfrtip',
            buttons: [
                    {
                        extend: 'pageLength',
                        className: 'btn btn-sm text-light bg-info',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                        titleAttr: 'Excel',
                        className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                        text: '<i class="fas fa-solid fa-file-excel"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                        titleAttr: 'Pdf',
                        className: 'btn btn-sm btn-danger',
                        text: '<i class="fa-regular fa-file-pdf"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    }
                ],
                initComplete: () => {
                    $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                    $('.buttons-pdf').removeClass('buttons-pdf');

                },
        });

        $(document).ready(function () {

        });
        //validate
        $(document).ready(function () {
            $('#formJobs').validate({
                rules: {
                    jobId: {
                        required: true,
                    },
                    jobName: {
                        required: true,
                    },
                    minSalary: {
                        required: true,
                    },
                    maxSalary: {
                        required: true
                    },
                },
                messages: {
                    jobId: "<h6>Enter User Id</h6>",
                    jobName: "<h6>Enter Job Name</h6>",
                    minSalary: "<h6>Enter Min Salary</h6>",
                    maxSalary: "<h6>Enter Max Salary</h6>",
                },
                submitHandler: () => {
                    if (check1 == false) {
                        InsertJob()
                    } else {
                        prosesUpdateJob()
                    }
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    // Add the help-block class to the error element
                    error.addClass("help-block");
                    // Add has-feedback class to the parent div.form-group
                    // in order to add icons to inputs
                    element.parents(".col-sm-5").addClass("has-feedback");
                    if (element.prop("type") === "checkbox") {
                        error.insertAfter(element.parent("label"));
                    } else {
                        error.insertAfter(element);
                    }
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!element.next("span")[0]) {
                        $("<span class='glyphicon glyphicon-remove form-control-feedback'></span>").insertAfter(element);
                    }
                },
                success: function (label, element) {
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!$(element).next("span")[0]) {
                        $("<span class='glyphicon glyphicon-ok form-control-feedback'></span>").insertAfter($(element));
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-error").removeClass("has-success");
                    $(element).next("span").addClass("glyphicon-remove").removeClass("glyphicon-ok");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-success").removeClass("has-error");
                    $(element).next("span").addClass("glyphicon-ok").removeClass("glyphicon-remove");
                }
            })
        });
        //Untuk cek button apakah dia insert atau update
        let check1 = false
        console.log(check1);
        const Add1 = () => {
            check1 = false
        }
        //insert
        function InsertJob() {
            let obj = {
                name: $("#jobName").val(),
                minSalary: $("#minSalary").val(),
                maxSalary: $("#maxSalary").val(),
            };
            console.log(obj);
            $.ajax({
                url: `https://localhost:7090/api/Jobs`,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(obj) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                $('#job').modal('hide');
                Swal.fire(
                    'Insert!',
                    'Data Berhasil Disimpan.',
                    'success'
                )
                jobTables.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                )
            }) //penutup ERROR
        } //penutup insert()
        //update
        function UpdateJob(id) {
            check1 = true //NILAI TRUE UNTUK UPDATE, YANG AKAN MASUK KE CHECK
            $.ajax({
                url: `https://localhost:7090/api/Jobs/` + id,
                dataType: "Json",
                Type: "GET",
                dataSrc: ""
            }).done((result) => {
                $("#jobsId").val(result.id);
                $("#jobName").val(result.name);
                $("#minSalary").val(result.minSalary);
                $("#maxSalary").val(result.maxSalary);
                console.log(result.id);
            })
        }
        function prosesUpdateJob() {
            event.preventDefault(); //untuk memberhentikan proses/action sebelumnya
            let coba = {
                id: $("#jobsId").val(),
                name: $("#jobName").val(),
                minSalary: $("#minSalary").val(),
                maxSalary: $("#maxSalary").val(),
            };
            console.log(coba);
            $.ajax({
                url: `https://localhost:7090/api/Jobs`,
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(coba) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                console.log("success");
                $('#job').modal('hide');
                Swal.fire(
                    'Update!',
                    'Data Berhasil Disimpan.',
                    'success'
                );
                $('#jobs').modal('hide')
                jobTables.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                );
            })
        }
        //delete
        function DeleteJob(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You wont able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'DELETE',
                        url: `https://localhost:7090/api/Jobs/${id}`,
                        success: () => {
                            Swal.fire(
                                'Deleted!',
                                'Employee has been deleted.',
                                'success'
                            )
                            $('#jobs').DataTable().ajax.reload()
                        },
                        error: () => {
                            Swal.fire(
                                'Failed!',
                                'Error deleting employee.',
                                'error'
                            )
                        }
                    })
                }
            })
        }
        // JOB PLACEMENT
        // GET DATA
        let jobPlacementTable = $('#Myjobplacement').DataTable({
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'pageLength',
                    className: 'btn btn-sm text-light bg-info',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: [0, 1, 2, 3]
                    },
                    titleAttr: 'Excel',
                    className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                    text: '<i class="fas fa-solid fa-file-excel"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                },
                {
                    extend: 'pdfHtml5',
                    customize: function (doc) {
                        doc.content[1].table.widths =
                            Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                    },
                    exportOptions: {
                        columns: [0, 1, 2, 3]
                    },
                    titleAttr: 'Pdf',
                    className: 'btn btn-sm btn-danger',
                    text: '<i class="fa-regular fa-file-pdf"></i>',
                    attr: {
                        style: "box-shadow: 3px 3px #000;"
                    }
                }
            ],
            initComplete: () => {
                $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                $('.buttons-pdf').removeClass('buttons-pdf');

            },
            ajax: {
                url: `https://localhost:7090/api/JobPlacements/JobPlacementMaster`,
                dataType: "Json",
                dataSrc: ""
            },
            columns: [ //untuk nampilin nama kolom di datatable
                {
                    "render": (data, type, row, meta) => {
                        return meta.row + meta.settings._iDisplayStart + 1
                    }
                },
                {
                    "data": "name"
                },
                {
                    "data": "department"
                },
                {
                    "data": "job"
                },
                {
                    "data": "id",
                    render: function (data) {
                        return `<div class="row"><div class="mx-auto"><a type="button" onclick="Update2('${data}')" class="btn btn-sm text-light bg-success" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#jobdep" data-toggle="tooltip" data-placement="top" title="Edit"><i class="fa-regular fa-pen-to-square"></i></a> <a type="button" onclick="Delete2('${data}')" class="ml-2 btn btn-sm text-light bg-danger" style="box-shadow:3px 3px #000;" data-toggle="tooltip" data-placement="top" title="Delete"><i class="fa-solid fa-trash"></i></a></div></div>`;
                    }
                }
            ],
            dom: 'Bfrtip',
            buttons: [
                    {
                        extend: 'pageLength',
                        className: 'btn btn-sm text-light bg-info',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                        titleAttr: 'Excel',
                        className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                        text: '<i class="fas fa-solid fa-file-excel"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        },
                        titleAttr: 'Pdf',
                        className: 'btn btn-sm btn-danger',
                        text: '<i class="fa-regular fa-file-pdf"></i>',
                        attr: {
                        style: "box-shadow: 3px 3px #000; margin-top: 13px;"
                        }
                    }
                ],
                initComplete: () => {
                    $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                    $('.buttons-pdf').removeClass('buttons-pdf');

                },
        });
        //Select2 for Employee ID

        $.ajax({
            url: `https://localhost:7090/api/Employees`,
            type: "GET",
            dataType: "Json"
        }).done((result) => {
            let emp = '<option value="" disabled selected> Select Employees </option>';
            $.each(result, (key, val) => {
                emp += `<option value="${val.id}"> ${val.firstName} ${val.lastName} </option>`;
            })
            $("#employee").html(emp);
        }).fail((error) => {
            alert(error);
        });

        //Select2 for Department ID

        $.ajax({
            url: `https://localhost:7090/api/Departments`,
            type: "GET",
            dataType: "Json"
        }).done((result) => {
            let depart = '<option value="" disabled selected> Select Departments </option>';

            $.each(result, (key, val) => {
                depart += `<option value="${val.id}"> ${val.name} </option>`;
            })
            $("#deps").html(depart);
        }).fail((error) => {
            console.log(error);
        });

        //Select2 for Job ID

        $.ajax({
            url: `https://localhost:7090/api/Jobs`,
            type: "GET",
            dataType: "Json",
            dataSrc: ""
        }).done((result) => {
            let job = `<option value="" disabled selected> Select Jobs </option>`;
            $.each(result, (key, val) => {
                job += `<option value="${val.id}"> ${val.name} </option>`;
            })
            $("#jobb").html(job);
        }).fail((error) => {
            console.log(error);
        });


        //validate
        $(document).ready(function () {
            $('#formJobdep').validate({
                rules: {
                    jpId: {
                        required: true,
                    },
                    employee: {
                        required: true,
                    },
                    deps: {
                        required: true,
                    },
                    jobb: {
                        required: true
                    },
                },
                messages: {
                    jpId: "<h6>Enter User Id</h6>",
                    employee: "<h6>Please Select Employee</h6>",
                    deps: "<h6>Please Select Department</h6>",
                    jobb: "<h6>Please Select Job</h6>",
                },
                submitHandler: () => {
                    if (!check) {
                        InsertJobPlacement()
                    } else {
                        prosesUpdateJobPlacement()
                    }
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    // Add the help-block class to the error element
                    error.addClass("help-block");
                    // Add has-feedback class to the parent div.form-group
                    // in order to add icons to inputs
                    element.parents(".col-sm-5").addClass("has-feedback");
                    if (element.prop("type") === "checkbox") {
                        error.insertAfter(element.parent("label"));
                    } else {
                        error.insertAfter(element);
                    }
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!element.next("span")[0]) {
                        $("<span class='glyphicon glyphicon-remove form-control-feedback'></span>").insertAfter(element);
                    }
                },
                success: function (label, element) {
                    // Add the span element, if doesn't exists, and apply the icon classes to it.
                    if (!$(element).next("span")[0]) {
                        $("<span class='glyphicon glyphicon-ok form-control-feedback'></span>").insertAfter($(element));
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-error").removeClass("has-success");
                    $(element).next("span").addClass("glyphicon-remove").removeClass("glyphicon-ok");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-sm-5").addClass("has-success").removeClass("has-error");
                    $(element).next("span").addClass("glyphicon-ok").removeClass("glyphicon-remove");
                }
            })
        });
        //Untuk cek button apakah dia insert atau update
        let check2
        const Add2 = () => {
            check2 = false

            $('#employee').select2({
                width: 'resolve',
                placeholder: "Select a employee"
            });

            $('#deps').select2({
                width: 'resolve',
                placeholder: "Select a department"
            });

            $('#jobb').select2({
                width: 'resolve',
                placeholder: "Select a job"
            });
        }
        function InsertJobPlacement() {
            let obj = {
                employeeId: $("#employee").val(),
                departmentId: $("#deps").val(),
                jobId: $("#jobb").val(),
            };
            console.log(obj);
            $.ajax({
                url: `https://localhost:7090/api/JobPlacements`,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(obj) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                $('#jobdep').modal('hide');
                Swal.fire(
                    'Insert!',
                    'Data Berhasil Disimpan.',
                    'success'
                )
                jobPlacementTable.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                )
            }) //penutup ERROR
        } //penutup insert()

        //
        let jpId = 0;
        //update
        function UpdateJobPlacement(id) {
            jpId = id;
            check = true //NILAI TRUE UNTUK UPDATE, YANG AKAN MASUK KE CHECK
            $.ajax({
                url: `https://localhost:7090/api/JobPlacements/` + id,
                dataType: "Json",
                Type: "GET",
                dataSrc: ""
            }).done((result) => {
                $("#jpid").val(id);
                $("#employee").val(result.employeeId);
                $("#deps").val(result.departmentId);
                $("#jobb").val(result.jobId);
                console.log(result.id);
            })
        }
        function prosesUpdateJobPlacement() {
            event.preventDefault(); //untuk memberhentikan proses/action sebelumnya
            let coba = {
                id: jpId,
                employeeId: $("#employee").val(),
                departmentId: $("#deps").val(),
                jobId: $("#jobb").val(),
            };
            console.log(coba);
            $.ajax({
                url: "https://localhost:7090/api/JobPlacements",
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(coba) //jika terkena 415 unsupported media type (tambahkan headertype Json & JSON.Stringify();)
            }).done((result) => {
                console.log("success");
                $('#jobdep').modal('hide');
                Swal.fire(
                    'Update!',
                    'Data Berhasil Disimpan.',
                    'success'
                );
                jobPlacementTable.ajax.reload()
            }).fail((error) => {
                Swal.fire(
                    'Failed!',
                    'Data Gagal Disimpan.',
                    'error'
                );
            })
        }
        //delete
        function DeleteJobPlacement(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You wont able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'DELETE',
                        url: `https://localhost:7090/api/JobPlacements/${id}`,
                        success: () => {
                            Swal.fire(
                                'Deleted!',
                                'Employee has been deleted.',
                                'success'
                            )
                            jobPlacementTable.ajax.reload()
                        },
                        error: () => {
                            Swal.fire(
                                'Failed!',
                                'Error deleting employee.',
                                'error'
                            )
                        }
                    })
                }
            })
        }
    </script>

    <!-- FOR VALIDATION WITH RED ALERTS-->
    <script>
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}