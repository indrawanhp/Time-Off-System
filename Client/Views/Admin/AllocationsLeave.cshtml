@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = "_UserLayout";
    ViewBag.Title = "Allocation Leave";
    ViewBag.Id = HttpContextAccessor.HttpContext.Session.GetInt32("ID");
}
@section navbar{
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="admin" asp-action="">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span>Dashboard</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="Account">
            <i class="fas fa-user-circle"></i>
            <span> Account </span>
        </a>
    </li>
    <li class="nav-item active">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="AllocationsLeave">
            <i class="fas fa-user-clock"></i>
            <span> Allocations Leave</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="EmployeeManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Employee Management</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="JobAndDepartmentManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Department & Jobs Management</span>
        </a>
    </li>
}
<style>

    label {
        width: 300px;
        display: inline-block;
        margin-top: 20px;
    }

        label.error {
            color: red;
            font-size: 12px;
            display: block;
            margin-top: 5px;
        }

    input.error, textarea.error {
        font-size: 12px;
        border: 1px solid red;
        color: red;
        width: 470px;
    }

    .error {
        color: red;
        font-size: 100%;
        position: relative;
        line-height: 1;
        width: 100%;
    }

    .select2-selection__rendered {
        line-height: 40px !important;
    }

    .select2-container .select2-selection--single {
        height: 41px !important;
    }

    .select2-selection__arrow {
        height: 41px !important;
    }

</style>
<section>
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h5 class="m-0 font-weight-bold text-primary text-center"> @ViewBag.Title </h5>
        </div>
        <div class="card-body">
            <a type="button" class="m-0 btn btn-primary btn-sm btn-icon-split mb-3" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#created" onclick="$('#formValidationAllocationLeave')[0].reset(); ModalPlacement();">
                <span class="icon text-white-50">
                    <i class="fas fa-plus"></i>
                </span>
                <span class="text">Allocation Leave</span>
            </a>
            <div class="table-responsive">
                <table class="table align-items-center" id="allocationsleave" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Nama</th>
                            <th>Jabatan</th>
                            <th>Departmen</th>
                            <th>Leave Type</th>
                            <th>Remaining Days Off</th>
                            <th width="10%">Action</th>
                        </tr>
                    </thead>
                    <tbody id="allocationsleave">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</section>

<!-- Created Modal -->

<div class="modal fade" id="created" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="modal-title-default">Created Allocation Leave</h6>
                <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
            </div>
            <div class="modal-body" id="c">
                <form class="row g-3 needs-validation" id="formValidationAllocationLeave" method="post" novalidate>

                    <div class="col-md-12">
                        <label class="form-label">Employee</label>
                        <select class="form-control" name="employeeId" id="employeeId" style="width:100%;">
                        </select>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Leave Type</label>
                        <input type="text" class="form-control" name="name" id="name">

                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Useable Leave</label>
                        <input type="number" class="form-control" name="remaining" id="remaining">
                    </div>
                    <div class="modal-footer">
                        <button id="btnAddAl" type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="getEditModalAllocationsLeave" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="modal-title-default">Edit Useable Leave</h6>
                <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
            </div>
            <div class="modal-body" id="c">
                <input type="hidden" class="form-control" name="txtid" id="txtid">
                <input type="hidden" class="form-control" name="txtname" id="txtname">
                <input type="hidden" class="form-control" name="txtidEmployee" id="txtidEmployee">

                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Useable Leave</label>
                    <input type="number" class="form-control" name="txtremaining" id="txtremaining" required>

                </div>
                <div class="modal-footer">
                    <button type="submit" name="btnEdit" data-dismiss="modal" onclick="EditRemaining()" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>

        const ModalPlacement = () => {
            $.ajax({
                url: "https://localhost:7090/api/Employees",
                type: "GET",
                dataType: "Json"
            }).done((result) => {
                let options = "";
                for (let i = 0; i < result.length; i++) {
                    options += `<option value="${result[i].id}">${result[i].firstName} ${result[i].lastName}</option>`
                }
                $('#employeeId').html(`<option value="" selected hidden>Select Employee</option>` + options);
            })

            $('#employeeId').select2({
                placeholder: "Select a employee"
            });
        }


        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })
        $(document).ready(function () {
            Table = $("#allocationsleave").DataTable({
                dom: 'Bfrtip', /*'<"top"Blf>rtip',*/
                buttons: [
                    {
                        extend: 'pageLength',
                        className: 'btn btn-sm text-light bg-info',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        },
                        titleAttr: 'Excel',
                        className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                        text: '<i class="fas fa-solid fa-file-excel"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        customize: function (doc) {
                            doc.content[1].table.widths =
                                Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                        },
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5]
                        },
                        titleAttr: 'Pdf',
                        className: 'btn btn-sm btn-danger',
                        text: '<i class="fa-regular fa-file-pdf"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    }
                    /*'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'*/
                ],
                initComplete: () => {
                    $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                    $('.buttons-pdf').removeClass('buttons-pdf');

                },
                ajax: {
                    url: "https://localhost:7090/api/AllocationsLeave/AllocationLeaveMasters",
                    dataType: "Json",
                    dataSrc: '',

                },
                columns: [
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["fullName"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["jabatan"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["department"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["leaveType"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["sisaCuti"] + " Hari";
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<div class="row"><div class="mx-auto"><a type="button" class="btn btn-sm btn-success" style="box-shadow:3px 3px #000;" title="Edit" onclick="getEditModalAllocationLeave('${row.allocationsLeaveId}')" data-toggle="modal" data-target="#getEditModalAllocationsLeave"><i class="fa-solid fa-pen-to-square"></i></a> <a type="button" class="ml-2 btn btn-sm btn-danger" style="box-shadow:3px 3px #000;" title="Delete" onclick="DeleteAllocationLeave('${row.allocationsLeaveId}')"><i class="fa-solid fa-trash-can"></i></a></div></div>`;
                        },
                        className: "text-center"
                    }
                ]

            });

        })

        $(function () {
            $("#formValidationAllocationLeave").validate({
                rules: {
                    employeeId: {
                        required: true
                    },
                    name: {
                        required: true
                    },
                    remaining: {
                        required: true
                    }
                },
                messages: {
                    employeeId: {
                        required: "Please Select Employee"
                    },
                    name: {
                        required: "Please enter leave type"
                    },
                    remaining: {
                        required: "Please enter Remaining Out"
                    }
                },
                submitHandler: () => {
                    InsertAllocationsLeave();
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    error.addClass("invalid-feedback mt-2");
                    error.appendTo(element.parent());
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-valid").removeClass("is-invalid");
                }
            });
        });

        function InsertAllocationsLeave() {
            let obj = {
                employeeId: $("#employeeId").val(),
                name: $("#name").val(),
                remaining: $("#remaining").val(),
            };
            $.ajax({
                url: "https://localhost:7090/api/AllocationsLeave",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(obj)
            }).done((result) => {
                $("#created").modal("hide");
                swal.fire({
                    text: 'Data added successfully!!',
                    icon: 'success',
                    timer: 5000,
                    timerProgressBar: true
                });
                Table.ajax.reload();
            }).fail((error) => {
                // jika gagal
                swal.fire({
                    title: "Failed!",
                    text: "Data failed to add!!",
                    icon: "error",
                    button: "Close",
                });
            })
        }

        function DeleteAllocationLeave(id) {
            swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    //isi dari object kalian buat sesuai dengan bentuk object yang akan di post
                    $.ajax({
                        headers: { 'Content-Type': 'application/json' },
                        url: "https://localhost:7090/api/AllocationsLeave/" + id,
                        type: "delete",
                        dataType: 'json'
                    }).done((result) => {
                        swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Delete Employee from database',
                            timer: 5000,
                            timerProgressBar: true
                        }),
                            Table.ajax.reload()
                    }).fire((error) => {
                        swal({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed deleting Employee from Database',
                        })
                    })
                }
            })
        }

        function getEditModalAllocationLeave(id) {
            $.ajax({
                url: "https://localhost:7090/api/AllocationsLeave/" + id,
                dataType: "Json",
                dataSrc: ""
            }).done((result) => {
                $('#txtid').val(result.id);
                $('#txtname').val(result.name)
                $('#txtidEmployee').val(result.employeeId);
                $('#txtremaining').val(result.remaining);
                console.log(result)

            }).fail((error) => {
                console.log(error);
            });
        }

        function EditRemaining() {
            var obj = { //sesuaikan sendiri nama objectnya dan beserta isinya
                //ini ngambil value dari tiap inputan di form nya
                // obj,
                id: $("#txtid").val(),
                name: $("#txtname").val(),
                employeeId: $("#txtidEmployee").val(),
                remaining: $("#txtremaining").val()

            }; console.log(obj)
            $.ajax({
                url: "https://localhost:7090/api/AllocationsLeave",
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(obj)
            }).done((result) => {
                let timerInterval
                swal.fire({
                    title: 'Saving Data!',
                    html: 'Wait a minute <b></b> milliseconds.',
                    timer: 2000,
                    timerProgressBar: true,
                    didOpen: () => {
                        swal.showLoading()
                        const b = swal.getHtmlContainer().querySelector('b')
                        timerInterval = setInterval(() => {
                            b.textContent = swal.getTimerLeft()
                        }, 100)
                    },
                    willClose: () => {
                        clearInterval(timerInterval)
                    }
                }).then((result) => {
                    if (result.dismiss === swal.DismissReason.timer) {
                        console.log('Waiting')
                    }
                }),
                                        /*            $('#editEmployee').modal('hide');
                                        */        Table.ajax.reload()

            }).fail((error) => {

                swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed Edit Employee',
                })
            })
        }


    </script>
}