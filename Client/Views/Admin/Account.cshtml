@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = "_UserLayout";
    ViewBag.Title = "Account";
    ViewBag.Id = HttpContextAccessor.HttpContext.Session.GetInt32("ID");
}
@section navbar{
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="admin" asp-action="">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span>Dashboard</span>
        </a>
    </li>
    <li class="nav-item active">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="Account">
            <i class="fas fa-user-circle"></i>
            <span> Account </span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="AllocationsLeave">
            <i class="fas fa-user-clock"></i>
            <span> Allocations Leave</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="EmployeeManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Employee Management</span>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Admin" asp-action="JobAndDepartmentManagement">
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span> Department & Jobs Management</span>
        </a>
    </li>
}

<style>
    .error {
        font-size: 14px;
        color: red;
    }

    .select2-selection__rendered {
        line-height: 40px !important;
    }

    .select2-container .select2-selection--single {
        height: 41px !important;
    }

    .select2-selection__arrow {
        height: 41px !important;
    }
</style>
<section>
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h5 class="m-0 font-weight-bold text-primary text-center"> @ViewBag.Title </h5>
        </div>
        <div class="card-body">
            <a type="button" class="m-0 btn btn-primary btn-sm btn-icon-split mb-3" style="box-shadow:3px 3px #000;" data-toggle="modal" data-target="#createdAccount" onclick="$('#formValidation')[0].reset(); ModalCreated();">
                <span class="icon text-white-50">
                    <i class="fas fa-plus"></i>
                </span>
                <span class="text">New Account</span>
            </a>
            <div class="table-responsive">
                <table class="table align-items-center" id="account" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Nama</th>
                            <th>Email</th>
                            <th>Roles</th>
                            <th width="10%">Action</th>
                        </tr>
                    </thead>
                    <tbody id="account">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</section>
<!-- Created Modal -->
<div class="modal fade" id="createdAccount" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="modal-title-default">Created Account</h6>
                <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
            </div>
            <div class="modal-body" id="c">
                <form id="formValidation" class="needs-validation" novalidate>
                    <div class="form-group row">
                        <div class="col-md-12">
                            <label for="employeeId" class="form-label">Employee</label>
                            <select class="form-control" name="employeeId" id="employeeId" style="width: 100%">
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-12">
                            <label for="email" class="form-label">Email</label>
                            <input type="text" name="email" id="email" class="form-control" required />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-12">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" name="password" id="password" class="form-control" required>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-12">
                            <label for="txtrole" class="form-label">Role</label>
                            <select class="form-control" name="txtrole" id="txtrole">
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="btnAdd" type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- getEditModal -->
<div class="modal fade" id="getEditModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="modal-title-default">Edit Account</h6>
                <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
            </div>
            <div class="modal-body" id="c">
                <form id="formedit" class="needs-validation" novalidate>
                <input type="hidden" class="form-control" name="idAccountRole" id="idAccountRole">
                <input type="hidden" class="form-control" name="idEmployee" id="idEmployee">
                <div class="form-group row">
                    <div class="col-md-12">
                        <label for="roleS" class="form-label" style="margin-top: -10px;">Role</label>
                        <select class="form-control" name="roleS" id="roleS" required>
                        </select>

                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="submit" name="btnEdit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-link ml-auto" data-dismiss="modal">Close</button>
                </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>

        const ModalCreated = () => {
            $.ajax({
                url: "../Admin/GetAll",
                type: "GET"
            }).done((result) => {
                let options = "";
                for (let i = 0; i < result.length; i++) {
                    options += `<option value="${result[i].id}">${result[i].firstName} ${result[i].lastName}</option>`
                }
                $('#employeeId').html(`<option value="" selected hidden>Select Employee</option>` + options);
            })

            $('#employeeId').select2({
                placeholder: "Select a employee"
            });
        }

        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })
        $(document).ready(function () {
            TableAccount = $("#account").DataTable({
                dom: 'Bfrtip', /*'<"top"Blf>rtip',*/
                buttons: [
                    {
                        extend: 'pageLength',
                        className: 'btn btn-sm text-light bg-info',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                        titleAttr: 'Excel',
                        className: 'btn mx-1 btn-sm btn-success text-light bg-success',
                        text: '<i class="fas fa-solid fa-file-excel"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    },
                    {
                        extend: 'pdfHtml5',
                        customize: function (doc) {
                            doc.content[1].table.widths =
                                Array(doc.content[1].table.body[0].length + 1).join('*').split('');
                        },
                        exportOptions: {
                            columns: [0, 1, 2, 3]
                        },
                        titleAttr: 'Pdf',
                        className: 'btn btn-sm btn-danger',
                        text: '<i class="fa-regular fa-file-pdf"></i>',
                        attr: {
                            style: "box-shadow: 3px 3px #000;"
                        }
                    }
                    /*'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'*/
                ],
                initComplete: () => {
                    $('.dt-button').removeClass('dt-button buttons-excel buttons-html5');
                    $('.buttons-pdf').removeClass('buttons-pdf');

                },
                ajax: {
                    url: "https://localhost:7090/api/Accounts/AccountMaster",
                    dataType: "Json",
                    dataSrc: '',

                },
                "columns": [
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["fullName"] /*+ " " + row["lastName"]*/;
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["email"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return row["roles"];
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<div class="row"><div class="mx-auto"><a type="button" class="btn btn-sm btn-success"  style="box-shadow:3px 3px #000;" title="Edit" onclick="getEditModal('${row.accountRoleId}')" data-toggle="modal" data-target="#getEditModal"><i class="fa-solid fa-pen-to-square"></i></a><a type="button" class="ml-2 btn btn-sm btn-danger" style="box-shadow:3px 3px #000;" title="Delete" onclick="Delete('${row.employeeId}')"><i class="fa-solid fa-trash-can"></i></a></div></div>`;
                        },
                        className: "text-center"
                    }
                ]

            });

        })
        $.ajax({
            url: "https://localhost:7090/api/Roles",
            type: "GET",
            dataType: "Json"
        }).done((result) => {
            let role = `<option value="" disabled selected>Please select role account</option>`;

            $.each(result, (key, val) => {
                role += `<option value="${val.id}" >${val.name}</option>`;
            })

            $("#roleS").html(role);

            $("#txtrole").html(role);
        }).fail((error) => {
            console.log(error);
        });



        $(function () {
            $("#formValidation").validate({
                rules: {
                    employeeId: {
                        required: true
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    password: {
                        required: true
                    },
                    txtrole: {
                        required: true

                    },
                },
                messages: {
                    employeeId: {
                        required: "Select user.",
                    },
                    email: {
                        required: "Enter user email.",
                        email: "xxx@xxx.xxx"
                    },
                    password: {
                        required: "Enter user password"
                    },
                    txtrole: {
                        required: "Select user role"
                    }
                },
                submitHandler: () => {
                    Insert();
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    error.addClass("invalid-feedback mt-2");
                    error.appendTo(element.parent());
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-valid").removeClass("is-invalid");
                }
            });
        });

        function Insert() {
            let obj = {
                employeeId: $("#employeeId").val(),
                email: $("#email").val(),
                password: $("#password").val(),
                roleId: $("#txtrole").val()
            };
            $.ajax({
                url: "https://localhost:7090/api/Accounts/Register",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(obj)
            }).done((result) => {
                $('#createdAccount').modal('hide');
                swal.fire({
                    text: 'New Account Created!',
                    icon: 'success',
                    timer: 5000,
                    timerProgressBar: true

                })
                TableAccount.ajax.reload();
            }).fail((error) => {
                // jika gagal
                swal.fire({
                    title: "Failed!",
                    text: "email or this user has been registered!!",
                    icon: "error",
                    button: "Close",
                });
            })
        }

        function Delete(id) {
            swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    //isi dari object kalian buat sesuai dengan bentuk object yang akan di post
                    $.ajax({
                        headers: { 'Content-Type': 'application/json' },
                        url: "https://localhost:7090/api/Accounts/" + id,
                        type: "delete",
                        dataType: 'json'
                    }).done((result) => {
                        $('#createdAccount').modal('hide');
                        swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Delete data from database',
                            timer: 5000,
                            timerProgressBar: true
                        })
                        TableAccount.ajax.reload()
                    }).fire((error) => {
                        swal({
                            icon: 'error',
                            title: 'Error',
                            text: 'Account Deleted Successfully!',
                            timer: 5000,
                            timerProgressBar: true
                        })
                    })
                }
            })
        }

        function getEditModal(id) {
            $.ajax({
                url: "https://localhost:7090/api/AccountRoles/" + id,
                dataType: "Json",
                dataSrc: ""
            }).done((result) => {
                $('#idAccountRole').val(result.id);
                $('#idEmployee').val(result.accountId);
                $('#roleS').val(result.roleId);
                console.log(result.roleId)

            }).fail((error) => {
                console.log(error);
            });
        }

        $(function () {
            $("#formedit").validate({
                rules: {
                    roleS: {
                        required: true
                    }
                },
                messages: {
                    roleS: {
                        required: "Select user role.",
                    }
                },
                submitHandler: () => {
                    EditAccount();
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    error.addClass("invalid-feedback mt-2");
                    error.appendTo(element.parent());
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-valid").removeClass("is-invalid");
                }
            });
        });

        function EditAccount() {
            var obj = {
                id: $("#idAccountRole").val(),
                accountId: $("#idEmployee").val(),
                roleId: $("#roleS").val()

            }; console.log(obj)
            $.ajax({
                url: "https://localhost:7090/api/AccountRoles",
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(obj)
            }).done((result) => {
                $('#getEditModal').modal('hide');
                Swal.fire({
                    text: 'Account has been Updated!',
                    icon: 'success',
                    timer: 5000,
                    timerProgressBar: true
                });
                TableAccount.ajax.reload()
            }).fail((error) => {
                Swal.fire({
                    text: 'Error Updating Account!',
                    icon: 'error',
                    timer: 5000,
                    timerProgressBar: true
                });
            })
        }
    </script>
}